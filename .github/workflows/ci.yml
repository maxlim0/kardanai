name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - master
  repository_dispatch:
    types: [cloud-init-status, docker-container-status]  

jobs:
  build-and-push:
    if: false
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: |
          IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/kardanai:latest"
          docker build -t $IMAGE_NAME .
      
      - name: Push Docker Image to Docker Hub
        run: |
          IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/kardanai:latest"
          docker push $IMAGE_NAME
    
  deploy:
    name: Deploy to DigitalOcean and Collect Logs
    #needs: build-and-push
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      FLOW_CONTROL_GITHUB_TOKEN: ${{ secrets.FLOW_CONTROL_GITHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install doctl
        run: |
          sudo snap install doctl
  
      - name: Authenticate doctl
        run: doctl auth init -t "${{ secrets.DIGITALOCEAN_TOKEN }}"

      - name: Create DigitalOcean Droplet
        run: |
          echo "Adding SSH key to agent"
          mkdir -p ~/.ssh
          echo "${{ secrets.DIGITALOCEAN_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          cd deploy && bash do-create-droplet.sh

  cloud-init-status:
    name: Check Cloud Init Status 
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'repository_dispatch' && github.event.action == 'cloud-init-status'
    steps:
      - name: Get Cloud Init Status
        run: |
          if [ "${{ github.event.client_payload.status }}" == "ready" ]; then
            echo "Cloud init completed successfully"
          else
            echo "Cloud init failed"
            exit 1
          fi

  docker-container-status:
    name: Check Docker Container Status and Collect Logs
    runs-on: ubuntu-latest 
    needs: cloud-init-status
    if: github.event_name == 'repository_dispatch' && github.event.action == 'docker-container-status'
    steps:
      - name: Checkout Repository 
        uses: actions/checkout@v4

      - name: Get Docker Container Status
        run: |
          if [ "${{ github.event.client_payload.status }}" == "completed" ]; then
            echo "Docker container completed successfully"
          else
            echo "Docker container failed"
            exit 1
          fi

      - name: Save Logs as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: container-logs
          path: "${{ github.event.client_payload.log_path }}"
  
  cleanup:
    name: Delete Droplet
    needs: docker-container-status
    # if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Delete Droplet
        run: |
          DROPLET_IP=$(cat droplet_ip.txt)
          doctl compute droplet delete "$DROPLET_IP" --force