name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - master

jobs:
  build-and-push:
    if: false
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: |
          IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/my-app:latest"
          docker build -t $IMAGE_NAME .
      
      - name: Push Docker Image to Docker Hub
        run: |
          IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/my-app:latest"
          docker push $IMAGE_NAME
    
  deploy-and-run:
    name: Deploy to DigitalOcean and Collect Logs
    #needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install doctl
        run: |
          sudo snap install doctl
  
      - name: Authenticate doctl
        run: doctl auth init -t "${{ secrets.DIGITALOCEAN_TOKEN }}"

      - name: Create DigitalOcean Droplet
        run: |
          echo "Adding SSH key to agent"
          mkdir -p ~/.ssh
          echo "${{ secrets.DIGITALOCEAN_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          cd deploy && bash do-create-droplet.sh

        # Если нужно будет более одного хоста, логику надо переделать вместо docker ip
        # использовать droplet id
      - name: Wait for Docker Container to Finish and Collect Logs
        env:
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          DROPLET_IP=$(cat droplet_ip.txt)
          
          echo "Adding SSH key to agent"
          mkdir -p ~/.ssh
          echo "${{ secrets.DIGITALOCEAN_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # проверим готовность провиженинга дроплета
          bash deploy/check_startup.sh $DROPLET_IP
            
          echo "Waiting for container to finish..."
          while ssh -o StrictHostKeyChecking=no root@$DROPLET_IP "docker ps --filter 'name=train' --format '{{.Names}}'" | grep -q "train"; do
            echo "Container is still running..."
            sleep 30
          done

          echo "Container finished, collecting logs..."
          ssh -o StrictHostKeyChecking=no root@$DROPLET_IP "docker logs train" > container_logs.txt

      - name: Save Logs as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: container-logs
          path: container_logs.txt

      - name: Delete Droplet
        run: |
          DROPLET_ID=$(cat droplet_id.txt)
          doctl compute droplet delete "$DROPLET_ID" --force
  